''' 
InstruÃ§Ãµes
Converta a funÃ§Ã£o is_leap()

No cÃ³digo inicial, vocÃª encontrarÃ¡ a soluÃ§Ã£o do desafio do ano bissexto. Primeiro, converta esta funÃ§Ã£o 
is_leap() para que em vez de imprimir "Ano bissexto." ou "NÃ£o Ã© ano bissexto". deve retornar True se for 
um ano bissexto e retornar False se nÃ£o for um ano bissexto.

Crie uma nova funÃ§Ã£o chamada days_in_month()

Em seguida, vocÃª modificarÃ¡ uma funÃ§Ã£o chamada days_in_month() que levarÃ¡ um ano e um mÃªs como entradas, 
por exemplo.

dias_no_mÃªs(ano=2022, mÃªs=2)
E usarÃ¡ essas informaÃ§Ãµes para descobrir se o ano Ã© bissexto e decidir o nÃºmero de dias do mÃªs, depois 
retornarÃ¡ isso como resultado, por exemplo:

28

A lista mÃªs_dias contÃ©m o nÃºmero de dias em um mÃªs de janeiro a dezembro para um ano nÃ£o bissexto. 
Um ano bissexto tem 29 dias em fevereiro.

Dica
Observe a chamada de funÃ§Ã£o na parte inferior do cÃ³digo para ver os argumentos posicionais. A ordem Ã© 
muito importante.

Sinta-se Ã  vontade para escolher seus prÃ³prios nomes de parÃ¢metros.

Lembre-se de que mÃªs_dias Ã© uma lista e as listas em Python comeÃ§am na posiÃ§Ã£o 0. Portanto, o nÃºmero de 
dias em janeiro Ã© mÃªs_dias[0]

Tenha cuidado com o recuo.

'''

def is_leap(year):
  if year % 4 == 0:
    if year % 100 == 0:
      if year % 400 == 0:
        #print("Leap year")
        return True
      else:
        #print("Not leap year")
        return False
    else:
      #print("Leap year")
      return True
  else:
    #print("Not leap year")
    return False
  
# STEP: Add more code here ğŸ‘‡
def days_in_month(year, month):
  month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  if is_leap(year):
      month_days[1] = 29
      return month_days[month - 1]
  else:
      return month_days[month - 1]
   

  
#ğŸš¨ Do NOT change any of the code below 
year = int(input("Enter a year")) # Enter a year
month = int(input("Enter a month")) # Enter a month
days = days_in_month(year, month)
print(days)
#leap_year = is_leap(year)
#print(leap_year)

